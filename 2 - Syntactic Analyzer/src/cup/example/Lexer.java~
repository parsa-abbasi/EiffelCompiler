/* The following code was generated by JFlex 1.3.5 on 6/7/18 9:11 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/7/18 9:11 PM from the specification file
 * <tt>file:/C:/Users/Parsa/workspace/SyntacticAnalyzer/lexer.jflex</tt>
 */
public class Lexer extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  final private static String yycmap_packed =
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\15"+
    "\2\0\1\16\2\0\1\50\1\51\1\56\1\11\1\0\1\10\1\14"+
    "\1\55\1\6\11\7\1\57\1\0\1\52\1\54\1\53\2\0\1\46"+
    "\3\13\1\42\1\13\1\43\1\4\1\37\2\4\1\47\1\4\1\40"+
    "\3\4\1\44\1\45\1\41\3\4\1\12\2\4\4\0\1\5\1\0"+
    "\1\21\1\13\1\17\1\35\1\24\1\23\1\4\1\36\1\33\2\4"+
    "\1\20\1\31\1\32\1\30\1\34\1\4\1\27\1\22\1\25\1\26"+
    "\2\4\1\12\2\4\uff85\0";

  /**
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /**
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = {
        0,    48,    96,   144,    96,   192,   240,   288,   336,   336,
      384,   432,   480,   528,   576,   624,   672,   720,   768,   816,
      864,   912,   960,  1008,    96,    96,  1056,  1104,    96,    96,
     1152,  1200,  1248,  1200,   432,    96,  1296,  1344,  1392,  1440,
     1488,  1536,  1584,  1632,  1680,  1728,   192,  1776,   192,  1824,
     1872,  1920,    96,    96,    96,  1248,   432,  1968,  2016,  2064,
     2112,  2160,  2208,  2256,   192,  2304,  2352,  2400,  2448,  2496,
     2544,  2592,  2640,  2688,   192,  2736,   192,   192,   192,  2784,
     2832,  2880,   192,  2928,   192,  2976,   192,  3024,   192,   192,
     3072,  3120,   192,  3168,  3216,   192,   192,   192
  };

  /**
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\2\6\1\13\1\14\1\3\1\15\1\16\2\6"+
    "\1\17\1\20\1\21\1\22\4\6\1\23\1\24\1\25"+
    "\1\6\1\26\4\6\1\27\1\30\2\6\1\31\1\32"+
    "\1\33\1\34\1\3\1\35\1\36\1\37\60\3\62\0"+
    "\1\5\61\0\4\6\2\0\2\6\3\0\31\6\16\0"+
    "\2\40\2\0\1\41\1\0\1\13\51\0\2\10\4\0"+
    "\1\13\51\0\1\42\1\10\4\0\1\13\51\0\2\13"+
    "\50\0\15\43\1\44\1\45\41\43\4\0\4\6\2\0"+
    "\2\6\3\0\1\6\1\46\6\6\1\47\20\6\14\0"+
    "\4\6\2\0\2\6\3\0\11\6\1\50\17\6\14\0"+
    "\4\6\2\0\2\6\3\0\5\6\1\51\2\6\1\52"+
    "\20\6\14\0\4\6\2\0\2\6\3\0\1\6\1\53"+
    "\11\6\1\54\15\6\14\0\4\6\2\0\2\6\3\0"+
    "\17\6\1\55\11\6\14\0\4\6\2\0\2\6\3\0"+
    "\13\6\1\56\15\6\14\0\4\6\2\0\2\6\3\0"+
    "\4\6\1\57\24\6\14\0\4\6\2\0\2\6\3\0"+
    "\10\6\1\60\20\6\14\0\4\6\2\0\2\6\3\0"+
    "\11\6\1\61\17\6\14\0\4\6\2\0\2\6\3\0"+
    "\21\6\1\62\7\6\14\0\4\6\2\0\2\6\3\0"+
    "\23\6\1\63\5\6\14\0\4\6\2\0\2\6\3\0"+
    "\22\6\1\64\6\6\64\0\1\65\57\0\1\66\57\0"+
    "\1\67\11\0\2\40\4\0\1\13\51\0\2\70\3\0"+
    "\1\70\3\0\1\70\1\0\1\70\1\0\2\70\10\0"+
    "\1\70\4\0\1\70\3\0\1\70\11\0\15\43\1\71"+
    "\1\45\41\43\4\0\4\6\2\0\2\6\3\0\2\6"+
    "\1\72\26\6\14\0\4\6\2\0\2\6\3\0\5\6"+
    "\1\73\23\6\14\0\4\6\2\0\2\6\3\0\1\74"+
    "\10\6\1\75\17\6\14\0\4\6\2\0\2\6\3\0"+
    "\2\6\1\76\26\6\14\0\4\6\2\0\2\6\3\0"+
    "\11\6\1\77\17\6\14\0\4\6\2\0\2\6\3\0"+
    "\3\6\1\100\25\6\14\0\4\6\2\0\2\6\3\0"+
    "\16\6\1\101\12\6\14\0\4\6\2\0\2\6\3\0"+
    "\5\6\1\102\23\6\14\0\4\6\2\0\2\6\3\0"+
    "\6\6\1\103\22\6\14\0\4\6\2\0\2\6\3\0"+
    "\14\6\1\104\14\6\14\0\4\6\2\0\2\6\3\0"+
    "\22\6\1\105\6\6\14\0\4\6\2\0\2\6\3\0"+
    "\27\6\1\106\1\6\14\0\4\6\2\0\2\6\3\0"+
    "\25\6\1\107\3\6\14\0\4\6\2\0\2\6\3\0"+
    "\3\6\1\110\25\6\14\0\4\6\2\0\2\6\3\0"+
    "\2\6\1\111\26\6\14\0\4\6\2\0\2\6\3\0"+
    "\2\6\1\112\26\6\14\0\4\6\2\0\2\6\3\0"+
    "\15\6\1\113\13\6\14\0\4\6\2\0\2\6\3\0"+
    "\6\6\1\114\22\6\14\0\4\6\2\0\2\6\3\0"+
    "\12\6\1\115\16\6\14\0\4\6\2\0\2\6\3\0"+
    "\5\6\1\116\23\6\14\0\4\6\2\0\2\6\3\0"+
    "\13\6\1\117\15\6\14\0\4\6\2\0\2\6\3\0"+
    "\14\6\1\120\14\6\14\0\4\6\2\0\2\6\3\0"+
    "\13\6\1\121\15\6\14\0\4\6\2\0\2\6\3\0"+
    "\23\6\1\122\5\6\14\0\4\6\2\0\2\6\3\0"+
    "\30\6\1\123\14\0\4\6\2\0\2\6\3\0\20\6"+
    "\1\124\10\6\14\0\4\6\2\0\2\6\3\0\3\6"+
    "\1\125\25\6\14\0\4\6\2\0\2\6\3\0\6\6"+
    "\1\126\22\6\14\0\4\6\2\0\2\6\3\0\1\6"+
    "\1\127\27\6\14\0\4\6\2\0\2\6\3\0\7\6"+
    "\1\130\21\6\14\0\4\6\2\0\2\6\3\0\1\6"+
    "\1\131\27\6\14\0\4\6\2\0\2\6\3\0\6\6"+
    "\1\132\22\6\14\0\4\6\2\0\2\6\3\0\24\6"+
    "\1\133\4\6\14\0\4\6\2\0\2\6\3\0\21\6"+
    "\1\134\7\6\14\0\4\6\2\0\2\6\3\0\5\6"+
    "\1\135\23\6\14\0\4\6\2\0\2\6\3\0\10\6"+
    "\1\136\20\6\14\0\4\6\2\0\2\6\3\0\23\6"+
    "\1\137\5\6\14\0\4\6\2\0\2\6\3\0\24\6"+
    "\1\140\4\6\14\0\4\6\2\0\2\6\3\0\5\6"+
    "\1\141\23\6\14\0\4\6\2\0\2\6\3\0\25\6"+
    "\1\142\3\6\10\0";

  /**
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  9,  9,  1,  0,
     0,  1,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */


    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }

    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code,
						new Location(yyline+1, yycolumn +1, yychar),
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }

    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : "+
    			(yyline) + " " + (yycolumn) + " " + yychar);
    }

    protected void emit_error(String message){
    	int n = (yyline) - ((yychar)/42);
    	System.out.println("scanner error: " + message + " at : " +
    			(n) + " " + (yycolumn) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3264];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /**
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead,
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof)
            yy_peek = false;
          else
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos =
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 82:
          {  return symbolFactory.newSymbol("REAL", REAL);  }
        case 99: break;
        case 78:
          {  return symbolFactory.newSymbol("THEN", THEN);  }
        case 100: break;
        case 77:
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 101: break;
        case 76:
          {  return symbolFactory.newSymbol("FROM", FROM);  }
        case 102: break;
        case 74:
          {  return symbolFactory.newSymbol("LOOP", LOOP);  }
        case 103: break;
        case 53:
          {  return symbolFactory.newSymbol("GTEQ", GTEQ);  }
        case 104: break;
        case 52:
          {  return symbolFactory.newSymbol("LTEQ", LTEQ);  }
        case 105: break;
        case 9:
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 106: break;
        case 29:
          {  return symbolFactory.newSymbol("MULT", MULT);  }
        case 107: break;
        case 26:
          {  return symbolFactory.newSymbol("LT", LT);  }
        case 108: break;
        case 27:
          {  return symbolFactory.newSymbol("GT", GT);  }
        case 109: break;
        case 46:
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 110: break;
        case 48:
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 111: break;
        case 95:
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 112: break;
        case 92:
          {  return symbolFactory.newSymbol("CREATE", CREATE);  }
        case 113: break;
        case 24:
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 114: break;
        case 25:
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 115: break;
        case 3:
        case 4:
          {                                }
        case 116: break;
        case 97:
          {  return symbolFactory.newSymbol("INTEGER", INTEGER);  }
        case 117: break;
        case 96:
          {  return symbolFactory.newSymbol("FEATURE", FEATURE);  }
        case 118: break;
        case 89:
          {  return symbolFactory.newSymbol("PRINT", PRINT);  }
        case 119: break;
        case 88:
          {  return symbolFactory.newSymbol("UNTIL", UNTIL);  }
        case 120: break;
        case 86:
          {  return symbolFactory.newSymbol("LOCAL", LOCAL);  }
        case 121: break;
        case 84:
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 122: break;
        case 54:
          {  return symbolFactory.newSymbol("COLEQ", COLEQ);  }
        case 123: break;
        case 8:
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 124: break;
        case 30:
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 125: break;
        case 35:
        case 56:
          {  return symbolFactory.newSymbol("STRING_LITERAL", STRING_LITERAL, yytext());  }
        case 126: break;
        case 10:
          {  return symbolFactory.newSymbol("REAL_LITERAL", REAL_LITERAL,new Float(yytext()));  }
        case 127: break;
        case 2:
        case 11:
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 128: break;
        case 5:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 47:
        case 49:
        case 50:
        case 51:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 75:
        case 79:
        case 80:
        case 81:
        case 83:
        case 85:
        case 87:
        case 90:
        case 91:
        case 93:
        case 94:
          {  return symbolFactory.newSymbol("IDENTIFIER", IDENTIFIER, yytext());  }
        case 129: break;
        case 6:
        case 7:
        case 33:
        case 55:
          {  return symbolFactory.newSymbol("INTEGER_LITERAL", INTEGER_LITERAL, new Integer(yytext()));  }
        case 130: break;
        case 64:
          {  return symbolFactory.newSymbol("END", END);  }
        case 131: break;
        case 28:
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 132: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          }
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
