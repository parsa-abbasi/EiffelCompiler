
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\005\007\000\002\005\006\000\002\006\011" +
    "\000\002\006\007\000\002\006\006\000\002\004\003\000" +
    "\002\004\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\014\003" +
    "\000\002\015\003\000\002\016\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\017\004\000\002" +
    "\017\004\000\002\020\004\000\002\020\004\000\002\021" +
    "\005\000\002\021\006\000\002\021\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\022\003\000" +
    "\002\022\004\000\002\023\005\000\002\023\003\000\002" +
    "\026\003\000\002\026\006\000\002\037\003\000\002\037" +
    "\005\000\002\042\005\000\002\024\005\000\002\024\004" +
    "\000\002\040\006\000\002\041\003\000\002\041\005\000" +
    "\002\041\003\000\002\041\005\000\002\025\004\000\002" +
    "\025\004\000\002\027\003\000\002\027\004\000\002\030" +
    "\005\000\002\034\011\000\002\034\010\000\002\034\004" +
    "\000\002\032\003\000\002\032\004\000\002\033\005\000" +
    "\002\033\004\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\010\003" +
    "\000\002\010\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\203\000\004\004\005\001\002\000\004\005\012\001" +
    "\002\000\006\003\010\042\011\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\005\uffe8\001" +
    "\002\000\004\005\uffe9\001\002\000\006\003\204\042\205" +
    "\001\002\000\004\006\015\001\002\000\004\002\001\001" +
    "\002\000\010\003\022\034\025\042\023\001\002\000\010" +
    "\034\uffdc\035\uffdc\042\uffdc\001\002\000\004\007\176\001" +
    "\002\000\010\034\uffdf\035\uffdf\042\uffdf\001\002\000\010" +
    "\034\025\035\175\042\155\001\002\000\004\002\uffe3\001" +
    "\002\000\010\007\uffdb\014\157\021\173\001\002\000\006" +
    "\034\025\042\023\001\002\000\014\003\037\031\035\036" +
    "\041\041\040\042\043\001\002\000\006\034\uffcd\042\uffcd" +
    "\001\002\000\004\035\151\001\002\000\016\031\uffb9\033" +
    "\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\001\002\000\016" +
    "\031\ufff9\033\ufff9\035\ufff9\036\ufff9\041\ufff9\042\ufff9\001" +
    "\002\000\016\031\uffb5\033\uffb5\035\uffb5\036\uffb5\041\uffb5" +
    "\042\uffb5\001\002\000\016\031\035\033\uffbb\035\uffbb\036" +
    "\041\041\040\042\043\001\002\000\016\031\uffb6\033\uffb6" +
    "\035\uffb6\036\uffb6\041\uffb6\042\uffb6\001\002\000\012\042" +
    "\112\043\053\044\060\045\052\001\002\000\016\031\uffb8" +
    "\033\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\001\002\000" +
    "\010\034\uffd5\035\uffd5\042\uffd5\001\002\000\004\014\132" +
    "\001\002\000\006\003\104\042\105\001\002\000\016\031" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\041\uffb7\042\uffb7\001\002" +
    "\000\010\003\045\014\047\022\046\001\002\000\016\031" +
    "\ufff8\033\ufff8\035\ufff8\036\ufff8\041\ufff8\042\ufff8\001\002" +
    "\000\020\031\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\041" +
    "\uffc4\042\uffc4\001\002\000\014\011\065\042\070\043\053" +
    "\044\060\045\052\001\002\000\012\042\055\043\053\044" +
    "\060\045\052\001\002\000\050\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\001\002\000\050\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\001\002\000\050" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001" +
    "\002\000\050\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\001\002\000\006\015\062\024\061\001\002\000" +
    "\006\015\uffd3\024\uffd3\001\002\000\006\015\uffd1\024\uffd1" +
    "\001\002\000\050\010\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\001\002\000\050\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\015\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\001\002\000\012\042\064\043" +
    "\053\044\060\045\052\001\002\000\016\031\uffd4\033\uffd4" +
    "\035\uffd4\036\uffd4\041\uffd4\042\uffd4\001\002\000\006\015" +
    "\uffd0\024\uffd0\001\002\000\006\015\uffd2\024\uffd2\001\002" +
    "\000\012\042\070\043\053\044\060\045\052\001\002\000" +
    "\030\010\073\011\074\012\075\013\072\031\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe\001\002\000" +
    "\020\031\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5" +
    "\042\uffc5\001\002\000\030\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\031\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc" +
    "\042\uffbc\001\002\000\030\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\031\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd" +
    "\042\uffbd\001\002\000\012\042\070\043\053\044\060\045" +
    "\052\001\002\000\012\042\070\043\053\044\060\045\052" +
    "\001\002\000\012\042\070\043\053\044\060\045\052\001" +
    "\002\000\012\042\070\043\053\044\060\045\052\001\002" +
    "\000\020\031\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\041" +
    "\uffc1\042\uffc1\001\002\000\020\031\uffc2\033\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\041\uffc2\042\uffc2\001\002\000\020\031" +
    "\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3" +
    "\001\002\000\020\031\uffc0\033\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\041\uffc0\042\uffc0\001\002\000\020\031\uffbf\033\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\001\002\000" +
    "\006\037\107\042\105\001\002\000\016\031\uffc8\033\uffc8" +
    "\035\uffc8\036\uffc8\041\uffc8\042\uffc8\001\002\000\006\003" +
    "\045\022\046\001\002\000\006\037\uffc7\042\uffc7\001\002" +
    "\000\012\042\112\043\053\044\060\045\052\001\002\000" +
    "\006\037\uffc6\042\uffc6\001\002\000\004\040\126\001\002" +
    "\000\012\025\114\026\115\027\117\030\116\001\002\000" +
    "\012\025\114\026\115\027\117\030\116\001\002\000\012" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\001\002\000\012\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\001\002\000\012\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\001\002\000\012\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\001\002\000\012\042\122\043\053" +
    "\044\060\045\052\001\002\000\006\032\ufff4\040\ufff4\001" +
    "\002\000\006\032\ufff5\040\ufff5\001\002\000\012\042\125" +
    "\043\053\044\060\045\052\001\002\000\006\032\ufff6\040" +
    "\ufff6\001\002\000\006\032\ufff7\040\ufff7\001\002\000\014" +
    "\031\035\035\130\036\041\041\040\042\043\001\002\000" +
    "\004\035\131\001\002\000\016\031\uffc9\033\uffc9\035\uffc9" +
    "\036\uffc9\041\uffc9\042\uffc9\001\002\000\016\031\uffca\033" +
    "\uffca\035\uffca\036\uffca\041\uffca\042\uffca\001\002\000\004" +
    "\043\133\001\002\000\004\015\134\001\002\000\016\031" +
    "\uffff\033\uffff\035\uffff\036\uffff\041\uffff\042\uffff\001\002" +
    "\000\004\032\136\001\002\000\020\003\141\031\035\033" +
    "\140\035\142\036\041\041\040\042\043\001\002\000\006" +
    "\033\144\035\145\001\002\000\004\035\143\001\002\000" +
    "\016\031\ufffa\033\ufffa\035\ufffa\036\ufffa\041\ufffa\042\ufffa" +
    "\001\002\000\016\031\ufffd\033\ufffd\035\ufffd\036\ufffd\041" +
    "\ufffd\042\ufffd\001\002\000\016\031\ufffb\033\ufffb\035\ufffb" +
    "\036\ufffb\041\ufffb\042\ufffb\001\002\000\012\031\035\036" +
    "\041\041\040\042\043\001\002\000\016\031\ufffe\033\ufffe" +
    "\035\ufffe\036\ufffe\041\ufffe\042\ufffe\001\002\000\004\035" +
    "\147\001\002\000\016\031\ufffc\033\ufffc\035\ufffc\036\ufffc" +
    "\041\ufffc\042\ufffc\001\002\000\006\033\uffba\035\uffba\001" +
    "\002\000\010\034\uffd6\035\uffd6\042\uffd6\001\002\000\010" +
    "\034\025\035\156\042\155\001\002\000\006\034\uffcc\042" +
    "\uffcc\001\002\000\010\034\uffde\035\uffde\042\uffde\001\002" +
    "\000\006\007\uffdb\014\157\001\002\000\004\002\uffe4\001" +
    "\002\000\004\042\160\001\002\000\004\021\166\001\002" +
    "\000\006\015\uffd9\023\164\001\002\000\004\015\163\001" +
    "\002\000\004\007\uffda\001\002\000\004\042\160\001\002" +
    "\000\004\015\uffd8\001\002\000\010\016\167\017\171\020" +
    "\170\001\002\000\012\015\uffe2\023\uffe2\034\uffe2\042\uffe2" +
    "\001\002\000\012\015\uffe1\023\uffe1\034\uffe1\042\uffe1\001" +
    "\002\000\012\015\uffe0\023\uffe0\034\uffe0\042\uffe0\001\002" +
    "\000\006\015\uffd7\023\uffd7\001\002\000\010\016\167\017" +
    "\171\020\170\001\002\000\006\034\uffcb\042\uffcb\001\002" +
    "\000\004\002\uffe5\001\002\000\006\003\201\042\202\001" +
    "\002\000\004\034\025\001\002\000\010\034\uffdd\035\uffdd" +
    "\042\uffdd\001\002\000\004\034\uffce\001\002\000\004\021" +
    "\173\001\002\000\006\034\uffcf\042\202\001\002\000\004" +
    "\006\uffe6\001\002\000\004\006\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\005\017\003\001\001\000\004\020" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\013\001\001\000\002\001\001\000\016" +
    "\022\020\023\017\024\015\026\016\027\023\030\025\001" +
    "\001\000\002\001\001\000\004\025\176\001\001\000\002" +
    "\001\001\000\010\023\153\024\015\026\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\151\023\017" +
    "\024\015\026\016\030\152\001\001\000\024\003\035\004" +
    "\027\005\030\006\043\010\026\011\032\033\041\034\033" +
    "\040\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\035\004\027\005\030\006\043\010\147\011\032\033" +
    "\041\034\033\040\031\001\001\000\002\001\001\000\014" +
    "\007\134\013\112\014\056\015\047\016\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\102\033\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\070" +
    "\014\056\015\047\016\050\035\066\036\065\001\001\000" +
    "\014\013\055\014\056\015\047\016\050\041\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\062\014\056\015\047\016\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\070\014" +
    "\056\015\047\016\050\036\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\070\014\056\015\047\016\050\036\100\001\001" +
    "\000\014\013\070\014\056\015\047\016\050\036\077\001" +
    "\001\000\014\013\070\014\056\015\047\016\050\036\076" +
    "\001\001\000\014\013\070\014\056\015\047\016\050\036" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\110\013\112\014\056\015\047\016" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\122\001\001\000\004\012\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\120\014\056\015\047\016\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\123\014\056" +
    "\015\047\016\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\035\004\027\005\030\006\043\010\126" +
    "\011\032\033\041\034\033\040\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\035\004\027\005\030\006\043\010\136\011\032" +
    "\033\041\034\033\040\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\035\004\027\005\030\006\043\010" +
    "\145\011\032\033\041\034\033\040\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\153\024\015\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\161\042\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\164\042\160\001\001\000\002" +
    "\001\001\000\004\031\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\202\030\025\001\001\000\004\024\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\152\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token();
    }


	protected Lexer lexer;
	public void report_error(String message) {

		lexer.emit_error(message);
  }

  public void report_fatal_error(String message) {
    report_error(message);
    throw new RuntimeException("Fatal Syntax Error");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


	java.util.ArrayList<VariableTypeChecker> varSymTable = new java.util.ArrayList<VariableTypeChecker>();
	java.util.ArrayList<ArgumentTypeChecker> funcSymTable = new java.util.ArrayList<ArgumentTypeChecker>();
	java.util.ArrayList<Argument> tmpArg = new java.util.ArrayList<Argument>();

	public boolean variableExist(String name){
		for(int i=0; i<varSymTable.size(); i++){
			if(varSymTable.get(i).getName().equals(name)){
				return true;
			}
		}
		return false;
	}

	public String getVariableType(String name){
		for(int i=0; i<varSymTable.size(); i++){
			if(varSymTable.get(i).getName().equals(name)){
				return varSymTable.get(i).getType();
			}
		}
		return "NotFound";
	}

	public boolean functionExist(String name){
		for(int i=0; i<funcSymTable.size(); i++){
			if(funcSymTable.get(i).getName().equals(name)){
				return true;
			}
		}
		return false;
	}

	public int argCounter = 0;
	public void resetArgCounter(){
		argCounter = 0;
	}
	public int currentFunction = 0;
	public void setCurrentFunction(String name){
		for(int i=0; i<funcSymTable.size(); i++){
			if(funcSymTable.get(i).getName().equals(name)){
				currentFunction = i;
			}
		}
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= class_section create_section feature_section
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // print_function ::= PRINT LPAREN STRING_LITERAL RPAREN
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Print function -> " + e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_function",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // if_condition ::= IF statement THEN code_section END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_condition",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // if_condition ::= IF statement THEN END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_condition",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // if_else_condition ::= IF statement THEN code_section ELSE code_section END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_else_condition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // if_else_condition ::= IF statement THEN ELSE END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_else_condition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // if_else_condition ::= IF statement THEN error
            {
              Object RESULT =null;
		 report_error("condition error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_else_condition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // condition ::= if_condition
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // condition ::= if_else_condition
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IDENTIFIER comparison_symbol IDENTIFIER
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IDENTIFIER comparison_symbol literal
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= literal comparison_symbol IDENTIFIER
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= literal comparison_symbol literal
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comparison_symbol ::= GT
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_symbol",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comparison_symbol ::= GTEQ
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_symbol",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comparison_symbol ::= LT
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_symbol",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comparison_symbol ::= LTEQ
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_symbol",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // integer_literal ::= INTEGER_LITERAL
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // floating_literal ::= REAL_LITERAL
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_literal",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // string_literal ::= STRING_LITERAL
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= integer_literal
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=i ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= floating_literal
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=f ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= string_literal
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=s ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_section ::= CLASS IDENTIFIER
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Class name = " + e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_section",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // class_section ::= CLASS error
            {
              Object RESULT =null;
		 report_error("class section error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_section",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // create_section ::= CREATE IDENTIFIER
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Function name = " + e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("create_section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // create_section ::= CREATE error
            {
              Object RESULT =null;
		 report_error("create section error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("create_section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // feature_section ::= FEATURE functions_section END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_section",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // feature_section ::= FEATURE variables_declaration functions_section END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_section",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // feature_section ::= FEATURE error
            {
              Object RESULT =null;
		 report_error("feature section error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_section",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // data_type ::= INTEGER
            {
              Object RESULT =null;
		 RESULT = "INTEGER";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // data_type ::= STRING
            {
              Object RESULT =null;
		 RESULT = "STRING";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data_type ::= REAL
            {
              Object RESULT =null;
		 RESULT = "REAL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // functions_section ::= function_section
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // functions_section ::= functions_section function_section
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_section ::= function_header local_section function_section_do
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_section",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_section ::= function_section_do
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_section",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_header ::= IDENTIFIER
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

											if(!functionExist(i)){
												funcSymTable.add(new ArgumentTypeChecker(i));
											}
											else {
												System.out.println("A function already exist with this name!");
											}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_header",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_header ::= IDENTIFIER LPAREN argument_section RPAREN
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

																		if(!functionExist(i)){
																			funcSymTable.add(new ArgumentTypeChecker(i));
																			for(int c=0; c<tmpArg.size(); c++){
																				funcSymTable.get(funcSymTable.size()-1).addArgument(tmpArg.get(c).getName() , tmpArg.get(c).getType());
																			}
																		}
																		else {
																			System.out.println("A function already exist with this name!");
																		}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_header",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argument_section ::= arg_declaration
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_section",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argument_section ::= arg_declaration SEMICOLON argument_section
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_section",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arg_declaration ::= IDENTIFIER COLON data_type
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

															tmpArg.add(new Argument(i, d.toString()));
															varSymTable.add(new VariableTypeChecker(i, d.toString()));
															System.out.println("An argument found : " + i + " with type " + d.toString());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_declaration",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_section_do ::= DO code_section END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_section_do",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_section_do ::= DO error
            {
              Object RESULT =null;
		 report_error("function section do error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_section_do",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_call ::= IDENTIFIER LPAREN function_call_arguments RPAREN
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

																				if(!functionExist(i)){
																					System.out.println("The function " + i + " wasn't decleared");
																				}
																				else {
																					setCurrentFunction(i);
																					resetArgCounter();
																				}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_call_arguments ::= IDENTIFIER
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

												if(argCounter>=funcSymTable.get(currentFunction).getArgSize()) {
													System.out.println("Function call arguments number is greater than expected number");
												}
												else {
													String expectedType = funcSymTable.get(currentFunction).getAnArgumentType(argCounter);
													String identifierType = getVariableType(i);
													if (identifierType.equals("NotFound")){
														System.out.println("This identifier was not decleared yet");
													}
													else {
														if(expectedType.equals(identifierType)) {
															System.out.println("Argument type is okay");
														}
														else {
															System.out.println("function call argument was not that expected");
															System.out.println("argument " + i + " type is " + identifierType);
															System.out.println("expected type is " + expectedType);
														}
													}
													argCounter++;
												}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_arguments",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_call_arguments ::= function_call_arguments COMMA IDENTIFIER
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

																if(argCounter>=funcSymTable.get(currentFunction).getArgSize()) {
																	System.out.println("Function call arguments number is greater than expected number");
																}
																else {
																	String expectedType = funcSymTable.get(currentFunction).getAnArgumentType(argCounter);
																	String identifierType = getVariableType(i);
																	if (identifierType.equals("NotFound")){
																		System.out.println("This identifier was not decleared yet");
																	}
																	else {
																		if(expectedType.equals(identifierType)) {
																			System.out.println("Argument type is okay");
																		}
																		else {
																			System.out.println("function call argument was not that expected");
																			System.out.println("argument " + i + " type is " + identifierType);
																			System.out.println("expected type is " + expectedType);
																		}
																	}
																	argCounter++;
																}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_arguments",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_call_arguments ::= literal
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

								if(argCounter>=funcSymTable.get(currentFunction).getArgSize()) {
									System.out.println("Function call arguments number is greater than expected number");
								}
								else {
									String expectedType = funcSymTable.get(currentFunction).getAnArgumentType(argCounter);
									String identifierType = l.getClass().getTypeName().substring(10).toUpperCase();
									if(expectedType.equals(identifierType)) {
										System.out.println("Argument type is okay");
									}
									else {
										System.out.println("function call argument was not that expected");
										System.out.println("argument " + l + " type is " + identifierType);
										System.out.println("expected type is " + expectedType);
									}
									argCounter++;
								}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_arguments",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_call_arguments ::= function_call_arguments COMMA literal
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

															if(argCounter>=funcSymTable.get(currentFunction).getArgSize()) {
																System.out.println("Function call arguments number is greater than expected number");
															}
															else {
																String expectedType = funcSymTable.get(currentFunction).getAnArgumentType(argCounter);
																String identifierType = l.getClass().getTypeName().substring(10).toUpperCase();
																if(expectedType.equals(identifierType)) {
																	System.out.println("Argument type is okay");
																}
																else {
																	System.out.println("function call argument was not that expected");
																	System.out.println("argument " + l + " type is " + identifierType);
																	System.out.println("expected type is " + expectedType);
																}
																argCounter++;
															}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_arguments",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // local_section ::= LOCAL variables_declaration
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_section",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // local_section ::= LOCAL error
            {
              Object RESULT =null;
		 report_error("local section error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_section",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variables_declaration ::= variable_declaration
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variables_declaration ::= variables_declaration variable_declaration
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_declaration ::= IDENTIFIER COLON data_type
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

								if (!variableExist(i)){
									varSymTable.add(new VariableTypeChecker(i, dt.toString()));
									System.out.println("This variable name is " + i + " and it's type is " + dt.toString());
								}
								else {
									System.out.println("This variable name already exist");
								}
								System.out.println("Variable declaration -> " + i);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // loop_section ::= FROM variables_initialization UNTIL statement LOOP code_section END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_section",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // loop_section ::= FROM variables_initialization UNTIL statement LOOP END
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_section",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // loop_section ::= FROM error
            {
              Object RESULT =null;
		 report_error("loop section error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_section",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variables_initialization ::= variable_initialization
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_initialization",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variables_initialization ::= variables_initialization variable_initialization
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_initialization",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_initialization ::= IDENTIFIER COLEQ computation
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

								String variableType = getVariableType(i);
								if(variableType.equals("NotFound")){
									System.out.println("This variable not declread yet!");
								}
								else {
									System.out.println("Variable " + i + " found and it's origin type is : " + variableType);
									System.out.println("Computation type is : " + c.toString());
									if(c.toString().equals(variableType)){
										System.out.println("variable initialization is okay!");
									}
									else {
										System.out.println("variable initialization was failed! cause of the diffrence between types");
									}
								}
								System.out.println("Variable initialization -> " + i);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initialization",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_initialization ::= IDENTIFIER error
            {
              Object RESULT =null;
		 report_error("variable initialization error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initialization",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // computation ::= operand PLUS operand
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

														String operand1Type = op1.toString();
														String operand2Type = op2.toString();
														if(operand1Type.equals(operand2Type)){
															RESULT = operand1Type ;
														}
														else {
															System.out.println("The type of operands must be the same (in Plus)");
														}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("computation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // computation ::= operand MINUS operand
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

														String operand1Type = op1.toString();
														String operand2Type = op2.toString();
														if(operand1Type.equals(operand2Type)){
															RESULT = operand1Type ;
														}
														else {
															System.out.println("The type of operands must be the same (in Minus)");
														}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("computation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // computation ::= operand DIV operand
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

														String operand1Type = op1.toString();
														String operand2Type = op2.toString();
														if(operand1Type.equals(operand2Type)){
															RESULT = operand1Type ;
														}
														else {
															System.out.println("The type of operands must be the same (in Div)");
														}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("computation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // computation ::= operand MULT operand
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

														String operand1Type = op1.toString();
														String operand2Type = op2.toString();
														if(operand1Type.equals(operand2Type)){
															RESULT = operand1Type ;
														}
														else {
															System.out.println("The type of operands must be the same (in Mult)");
														}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("computation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // computation ::= MINUS operand
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

														String operandType = op.toString();
														if(!operandType.equals("STRING")){
															RESULT = op;
														}
														else {
															System.out.println("You can not Minus a String!");
														}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("computation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // computation ::= operand
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

														RESULT = op;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("computation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operand ::= literal
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=l.getClass().getTypeName().substring(10).toUpperCase();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operand ::= IDENTIFIER
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

										String variableType = getVariableType(e);
										if(variableType.equals("NotFound")){
											System.out.println("This variable (used as operand) not declread yet!");
										}
										else {
											System.out.println("Variable found (used as operand) and it's origin type is : " + variableType);
											RESULT=variableType;
										}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // code_section ::= code_section_in
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // code_section ::= code_section_in code_section
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // code_section_in ::= condition
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section_in",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // code_section_in ::= print_function
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section_in",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // code_section_in ::= variable_initialization
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section_in",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // code_section_in ::= loop_section
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section_in",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // code_section_in ::= function_call
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section_in",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
